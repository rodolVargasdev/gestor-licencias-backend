const { AppDataSource } = require('./src/config/database');
const Disponibilidad = require('./src/models/disponibilidad.model');
const TipoLicencia = require('./src/models/tipo-licencia.model');
const { IsNull, Not } = require('typeorm');

async function verificarLogicaReseteo() {
  console.log('üîç Verificando l√≥gica de reseteo de disponibilidad...');
  
  try {
    if (!AppDataSource.isInitialized) {
      await AppDataSource.initialize();
      console.log('‚úÖ Conexi√≥n a la base de datos inicializada.');
    }

    const disponibilidadRepo = AppDataSource.getRepository(Disponibilidad);
    const tipoLicenciaRepo = AppDataSource.getRepository(TipoLicencia);
    
    // Obtener todos los tipos de licencia con sus periodos de control
    const tiposLicencia = await tipoLicenciaRepo.find({
      where: {
        periodo_control: Not(IsNull())
      }
    });

    console.log('\nüìä TIPOS DE LICENCIA CON CONTROL DE PER√çODO:');
    console.log('='.repeat(80));
    
    const resumenPeriodos = {
      'a√±o': 0,
      'mes': 0,
      'ninguno': 0
    };

    tiposLicencia.forEach(tipo => {
      resumenPeriodos[tipo.periodo_control]++;
      console.log(`  ‚Ä¢ ${tipo.codigo} - ${tipo.nombre} (${tipo.periodo_control})`);
    });

    console.log('\nüìà RESUMEN POR PER√çODO:');
    console.log(`  ‚Ä¢ Anual (a√±o): ${resumenPeriodos['a√±o']} tipos`);
    console.log(`  ‚Ä¢ Mensual (mes): ${resumenPeriodos['mes']} tipos`);
    console.log(`  ‚Ä¢ Sin control (ninguno): ${resumenPeriodos['ninguno']} tipos`);

    // Obtener algunas disponibilidades de ejemplo para verificar
    const disponibilidadesEjemplo = await disponibilidadRepo.find({
      relations: ['tipo_licencia'],
      where: {
        tipo_licencia: {
          periodo_control: Not(IsNull())
        }
      },
      take: 10
    });

    console.log('\nüîç EJEMPLOS DE DISPONIBILIDADES:');
    console.log('='.repeat(80));
    
    const hoy = new Date();
    const anoActual = hoy.getFullYear();
    const mesActual = hoy.getMonth();

    disponibilidadesEjemplo.forEach(disp => {
      const tipoLicencia = disp.tipo_licencia;
      const fechaUltimaActualizacion = new Date(disp.fecha_actualizacion);
      const anoUltimaActualizacion = fechaUltimaActualizacion.getFullYear();
      const mesUltimaActualizacion = fechaUltimaActualizacion.getMonth();

      let necesitaRenovacion = false;
      let motivo = '';

      if (tipoLicencia.periodo_control === 'a√±o') {
        if (anoActual > anoUltimaActualizacion) {
          necesitaRenovacion = true;
          motivo = `A√±o actual (${anoActual}) > √öltimo a√±o (${anoUltimaActualizacion})`;
        }
      } else if (tipoLicencia.periodo_control === 'mes') {
        if (anoActual > anoUltimaActualizacion || (anoActual === anoUltimaActualizacion && mesActual > mesUltimaActualizacion)) {
          necesitaRenovacion = true;
          motivo = `Mes actual (${mesActual + 1}/${anoActual}) > √öltimo mes (${mesUltimaActualizacion + 1}/${anoUltimaActualizacion})`;
        }
      }

      console.log(`  ‚Ä¢ Trabajador ${disp.trabajador_id} | ${tipoLicencia.nombre} (${tipoLicencia.periodo_control})`);
      console.log(`    - D√≠as disponibles: ${disp.dias_disponibles}`);
      console.log(`    - D√≠as usados: ${disp.dias_usados}`);
      console.log(`    - D√≠as restantes: ${disp.dias_restantes}`);
      console.log(`    - √öltima actualizaci√≥n: ${fechaUltimaActualizacion.toLocaleDateString()}`);
      console.log(`    - Necesita renovaci√≥n: ${necesitaRenovacion ? 'S√ç' : 'NO'}`);
      if (necesitaRenovacion) {
        console.log(`    - Motivo: ${motivo}`);
      }
      console.log('');
    });

    // Verificar configuraci√≥n del cron job
    console.log('‚è∞ CONFIGURACI√ìN DEL CRON JOB:');
    console.log('='.repeat(80));
    console.log('  ‚Ä¢ Expresi√≥n: 0 0 * * * (todos los d√≠as a las 00:00)');
    console.log('  ‚Ä¢ Zona horaria: America/El_Salvador');
    console.log('  ‚Ä¢ Estado: ACTIVO en app.js');
    console.log('  ‚Ä¢ Funci√≥n: renovarDisponibilidad()');

    console.log('\n‚úÖ Verificaci√≥n completada exitosamente');

  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error);
  } finally {
    if (AppDataSource.isInitialized) {
      await AppDataSource.destroy();
      console.log('üîö Conexi√≥n a la base de datos cerrada.');
    }
  }
}

// Ejecutar la verificaci√≥n
verificarLogicaReseteo(); 